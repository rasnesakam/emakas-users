plugins {
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
	id 'com.github.node-gradle.node' version '3.5.1'
}

group = 'com.emakas'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = "17"
	targetCompatibility = "17"
}

node {
	version = '20.12.1'
	npmVersion = '10.5.0'
	download = true
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


dependencies {
	// Spring Boot Web Framework
	implementation 'org.springframework.boot:spring-boot-starter-websocket:3.3.3'
	// Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.2'
	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security:3.3.4'
	// Jwt implementation
	implementation 'com.auth0:java-jwt:4.3.0'
	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.28'
	annotationProcessor 'org.projectlombok:lombok:1.18.28'
	// Postgresql
	implementation 'org.postgresql:postgresql:42.7.2'
	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	// View renderer
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.1.2'
	//devtools
	implementation 'org.springframework.boot:spring-boot-devtools:3.3.4'
	// Annotations
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.3'
	testImplementation 'org.testcontainers:junit-jupiter'
	// Kafka Test
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:kafka'

}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

task uiInstall(type: NpmTask){
	args = ['install']
	workingDir = file('src/ui')
}

task uiBuild(type: NpmTask) {
	dependsOn uiInstall
	args = ['run', 'build']
	workingDir = file('src/ui')
}

task copyUi(type: Copy){
	dependsOn uiBuild
	from 'src/ui/dist'
	into 'src/main/resources/static'
}

processResources.dependsOn copyUi
